Assignment 2: Create Hive External Tables in Hive
Create external tables connecting to files extracted using sqoop:
Products
Orders
OrderDetails
Employees
Customers
Payments

Assignment 3: Create Hive Partitioned Tables
a. Create a Hive Partitioned table in Parquet format by joining Orders, OrderDetails and Customers tables partitioned by year and month:
Table Name: OrderCustomer Detail
Columns:
OrderNumber
OrderDate
ShippedDate
CustomerNumber
CustomerName
OrderAmount
Status
OrderYear (Partition Column)
OrderMonth (Partition Column)


select o.ordernumber
	, o.orderdate
	, o.ShippedDate
	, o.customerNumber
	, cx.CustomerName
	, o.Status
	, year(orderDate) as OrderYear 
	, month(orderDate) as OrderMonth
	, sum(od.quantityordered * od.priceeach) as OrderAmount
	
from orders o 
	join orderdetails od on (o.ordernumber = od.ordernumber)
	join customers cx on 	(o.customerNumber = cx.customerNumber)
	
group by 
	o.ordernumber
	, o.orderdate
	, o.ShippedDate
	, o.customerNumber
	, cx.CustomerName
	, o.Status
	, year(orderDate) 
	, month(orderDate)
;
create_table_sql="create table ordersummary_by_customers (
 orderNumber int, 
 orderdate date,
 shippeddate date,
 customerNumber int
,customerName string 
, Status 		string
, OrderYear 	int
, OrderMonth	int
, OrderAmount	(10,2)
) partitioned by (orderYear int, orderMonth int)
  stored as parquet;"


b. Create a Hive Partitioned table in Parquet format by joining Orders, OrderDetails and Products tables partitioned by year and month:
Table Name: OrderProductDetail
Columns:
OrderNumber
OrderDate
ProductCode
ProductName
ProductLine
OrderAmount
OrderYear (Partition Column)
OrderMonth (Partition Column)


create_table_sql="create table ordersummary_by_products (
 orderNumber int, 
 orderdate date,
 ProductCode string
,ProductName string 
, ProductLine 		string
, OrderAmount	(10,2)
) partitioned by (orderYear int, orderMonth int)
  stored as parquet;"
  
select o.ordernumber
	, o.orderdate
	, o.ShippedDate
	, p.ProductCode
	, p.ProductName
	, p.ProductLine
	, sum(od.quantityordered * od.priceeach) as OrderAmount
	, year(orderDate) as OrderYear 
	, month(orderDate) as OrderMonth
	
	
from orders o 
	join orderdetails od on (o.ordernumber = od.ordernumber)
	join products p on 	(od.ProductCode = p.ProductCode)
	
group by 
	o.ordernumber
	, o.orderdate
	, o.ShippedDate
	, p.ProductCode
	, p.ProductName
	, p.ProductLine
	, year(orderDate)  
	, month(orderDate) 
;



Assignment 4: Execute Queries to generate aggregate tables and load the output into Hive target Tables
d. Find the total sales generated by sales representatives by month
Target TableName: SalesSummary
Output should have following columns:
Sales Rep Code, Sales Rep Name, Year, month, Sales


hive_conf="set hive.exec.dynamic.partition.mode=nonstrict;SET hive.exec.max.dynamic.partitions=100000;SET hive.exec.max.dynamic.partitions.pernode=100000;"

drop_table=" DROP TABLE IF EXISTS SalesSummary;"
create_table_4asql="create table SalesSummary (
 salesRepCode int, 
 salesRepName string
, OrderAmount	decimal(10,2)
) partitioned by (orderYear int, orderMonth int)
  stored as parquet;"
  
 insert_data_4a=" insert into salesSummary
 partition (OrderYear, OrderMonth)
select 
	emp.employeeNumber
	, CONCAT(emp.lastName , ' ' , emp.firstName) as employeeName
	, year(orderDate) as OrderYear 
	, month(orderDate) as OrderMonth
	, sum(od.quantityordered * od.priceeach) as Sales
	
from orders o 
	join orderdetails od on (o.ordernumber = od.ordernumber)
	join customers cx on 	(o.customerNumber = cx.customerNumber)
	join employees emp on (cx.salesRepEmployeeNumber = emp.employeeNumber)
group by
	emp.employeeNumber
	, CONCAT(emp.lastName , ' ' , emp.firstName)
	, year(orderDate)
	, month(orderDate);"

query="select count(*) from salesSummary;"

hive -e "$hive_conf $drop_table $create_table_4asql $insert_data_4a $query"




e. Find the total sales generated by each product by month
Target TableName: ProductSummary
Output should have following columns:
Product Code, Product Name, Product Line, year, month, sales

drop_table=" DROP TABLE IF EXISTS ProductSummary;"
create_table_sql="create table ProductSummary (
 ProductCode string
,ProductName string 
, ProductLine 		string
, OrderAmount	(10,2)
) partitioned by (orderYear int, orderMonth int)
  stored as parquet;"

insert_data_4b=" insert into ProductSummary
 partition (OrderYear, OrderMonth) 
select 
	  p.ProductCode
	, p.ProductName
	, p.ProductLine
	, year(orderDate) as OrderYear 
	, month(orderDate) as OrderMonth
	, sum(od.quantityordered * od.priceeach) as sales
	
from orders o 
	join orderdetails od on (o.ordernumber = od.ordernumber)
	join products p on 	(od.ProductCode = p.ProductCode)
	
group by 
	 p.ProductCode
	, p.ProductName
	, p.ProductLine
	, year(orderDate)  
	, month(orderDate) 
;

query="select count(*) from ProductSummary;"

hive -e "$hive_conf $drop_table $create_table_4asql $insert_data_4a $query"




f. Find the total order amount, and payment amount for each customer by joining
Order Customer Detail and Payments tables
Target TableName: Customer Summary Output should have following columns:
CustomerNumber, CustomerName, OrderAmount, PaymentAmount

hive_conf="set hive.exec.dynamic.partition.mode=nonstrict;SET hive.exec.max.dynamic.partitions=100000;SET hive.exec.max.dynamic.partitions.pernode=100000;"

drop_table=" DROP TABLE IF EXISTS CustomerSummaryOutput;"

create_table_sql="create table CustomerSummaryOutput (
 orderNumber int, 
 customerNumber int
,customerName string 
, OrderAmount	decimal(10,2)
, paymentAmount decimal(10,2)
)
  row format delimited 
  fields terminated by ',' 
  stored as textfile;"

insert_query=" insert into CustomerSummaryOutput
select 
	 o.customerNumber
	, cx.CustomerName
	, sum(od.quantityordered * od.priceeach) as OrderAmount
	, py.amount as PaymentAmount
from orders o 
	join orderdetails od on (o.ordernumber = od.ordernumber)
	join customers cx on 	(o.customerNumber = cx.customerNumber)
	join payments py on 	(py.customerNumber = cx.customerNumber)
	
group by 
	 o.customerNumber
	, cx.CustomerName
	, py.amount 
;"

query="select count(*) from salesSummary;"

hive -e "$hive_conf $drop_table $create_table_sql $insert_query $query"